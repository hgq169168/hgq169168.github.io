<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好好学习，天天向上</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-29T00:23:13.368Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr hong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js基础小总结2</title>
    <link href="http://yoursite.com/2020/07/29/js%E5%9F%BA%E7%A1%80%E5%B0%8F%E6%80%BB%E7%BB%932/"/>
    <id>http://yoursite.com/2020/07/29/js%E5%9F%BA%E7%A1%80%E5%B0%8F%E6%80%BB%E7%BB%932/</id>
    <published>2020-07-29T00:06:40.000Z</published>
    <updated>2020-07-29T00:23:13.368Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-string、number、boolean、undefined、null等简单数据类型放在栈里面，而数组、对象、带有new的函数等复杂数据类型放在堆里面"><a href="#1-string、number、boolean、undefined、null等简单数据类型放在栈里面，而数组、对象、带有new的函数等复杂数据类型放在堆里面" class="headerlink" title="1.string、number、boolean、undefined、null等简单数据类型放在栈里面，而数组、对象、带有new的函数等复杂数据类型放在堆里面"></a>1.string、number、boolean、undefined、null等简单数据类型放在栈里面，而数组、对象、带有new的函数等复杂数据类型放在堆里面</h3><h3 id="2-简单数据类型null，返回一个空的对象object"><a href="#2-简单数据类型null，返回一个空的对象object" class="headerlink" title="2.简单数据类型null，返回一个空的对象object"></a>2.简单数据类型null，返回一个空的对象object</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(ypeof(null)); &#x2F;&#x2F;object</span><br></pre></td></tr></table></figure><h3 id="3-Web-APIs"><a href="#3-Web-APIs" class="headerlink" title="3.Web APIs:"></a>3.Web APIs:</h3><p>(1)getElementById()  //通过id获取元素，返回元素对象</p><p>(2)getElementByTagName() //通过标签名获取元素，返回伪数组</p><p>(3)getElementByClassName() //通过类名获取元素，返回伪数组</p><p>(4)querySelector()//通过选择器获取第一个元素，返回第一个元素对象</p><p>(5)querySelector()//通过选择器获取所有元素，返回伪数组</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul class&#x3D;&quot;ul2&quot; id&#x3D;&quot;ul1&quot;&gt;</span><br><span class="line">        &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var ul &#x3D; document.getElementById(&#39;ul1&#39;);</span><br><span class="line">        var ul1 &#x3D; document.getElementsByTagName(&#39;ul&#39;);</span><br><span class="line">        var ul2 &#x3D; document.getElementsByClassName(&#39;ul2&#39;);</span><br><span class="line">        var ul3 &#x3D; document.querySelector(&#39;.ul2&#39;) &#x2F;&#x2F;在类名前加 .</span><br><span class="line">        var ul4 &#x3D; document.querySelector(&#39;#ul1&#39;)&#x2F;&#x2F;在id前加 #</span><br><span class="line">        var ul5 &#x3D; document.querySelector(&#39;ul&#39;)&#x2F;&#x2F;标签名不添加</span><br><span class="line">        var ul6 &#x3D; document.querySelectorAll(&#39;ul&#39;)</span><br><span class="line">        console.log(ul, ul1, ul2, ul3, ul4, ul5, ul6);</span><br><span class="line">      &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>![](C:\Users\woduyou\Desktop\web APIs.png)</p><h3 id="4-element-innerText和element-HTML的区别：（两者都是获取标签内容，并且可以对其赋值）"><a href="#4-element-innerText和element-HTML的区别：（两者都是获取标签内容，并且可以对其赋值）" class="headerlink" title="4.element.innerText和element.HTML的区别：（两者都是获取标签内容，并且可以对其赋值）"></a>4.element.innerText和element.HTML的区别：（两者都是获取标签内容，并且可以对其赋值）</h3><p>(1)element.HTML能识别HTML标签</p><p>(2)element.HTML适合块元素（标签）</p><p>(3)element.innerText适合行元素（标签）</p><p>……剩下的以后补充</p><h3 id="5-浅说js的方法："><a href="#5-浅说js的方法：" class="headerlink" title="5.浅说js的方法："></a>5.浅说js的方法：</h3><p>(1)setAttribute(‘属性’, 值)    //创建自定义属性</p><p>(2)getAttribute(‘属性’) //获取自定义属性值，也可以获取自身属性值</p><p>(3)elemet.属性  //获取自身属性值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"ul2"</span>&gt;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var ul = document.getElementById('ul1');</span></span><br><span class="line"><span class="regexp">ul.setAttribute('id', 'ul2')</span></span><br><span class="line"><span class="regexp">console.log(ul.getAttribute('id')); /</span><span class="regexp">/返回ul2</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-通过父子关系获得对应节点"><a href="#6-通过父子关系获得对应节点" class="headerlink" title="6.通过父子关系获得对应节点"></a>6.通过父子关系获得对应节点</h3><p>(1)node.parentNode //父级节点</p><p>(2)node.childNodes //子级节点（会包含元素、文本）</p><p>(3)<a href="https://i.loli.net/2020/07/26/CgLxRWZNG7voeqH.png" target="_blank" rel="noopener">https://i.loli.net/2020/07/26/CgLxRWZNG7voeqH.png</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>js基础小总结1</title>
    <link href="http://yoursite.com/2020/07/29/js%E5%9F%BA%E7%A1%80%E5%B0%8F%E6%80%BB%E7%BB%931/"/>
    <id>http://yoursite.com/2020/07/29/js%E5%9F%BA%E7%A1%80%E5%B0%8F%E6%80%BB%E7%BB%931/</id>
    <published>2020-07-29T00:03:40.000Z</published>
    <updated>2020-07-29T00:20:45.680Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-转换成字符串："><a href="#1-转换成字符串：" class="headerlink" title="1.转换成字符串："></a>1.转换成字符串：</h3><p>(1) String(str)</p><p>(2) str.toString()</p><p>(3) str + ‘’</p><p>(4) arr.join()  //数组转换成字符串   str.split(‘分隔符’) 字符串转数组</p><h3 id="2-转换为数值："><a href="#2-转换为数值：" class="headerlink" title="2.转换为数值："></a>2.转换为数值：</h3><p>(1) parseInt(变量)   //变量要为字符串数字，下同</p><p>(2) parseFloat(变量)</p><p>(3) Number(变量)</p><p>(4) 变量 - num   // num为具体数值，如 1， 2， 0</p><h3 id="3-typeof检查数据类型"><a href="#3-typeof检查数据类型" class="headerlink" title="3.typeof检查数据类型"></a>3.typeof检查数据类型</h3><p>(1) typeof(a)</p><p>(2) typeof a</p><p>例子：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(type a); <span class="comment">//返回number</span></span><br><span class="line"><span class="built_in">console</span>.log(type(a)); <span class="comment">//返回number</span></span><br><span class="line"><span class="built_in">console</span>.log(type <span class="string">'c'</span>); <span class="comment">//返回string  可以未定义，也能返回c的类型</span></span><br></pre></td></tr></table></figure><h3 id="4-instanceof检测是否是数组"><a href="#4-instanceof检测是否是数组" class="headerlink" title="4.instanceof检测是否是数组"></a>4.instanceof检测是否是数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(c <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//返回false</span></span><br></pre></td></tr></table></figure><h3 id="5-Math的一些函数"><a href="#5-Math的一些函数" class="headerlink" title="5.Math的一些函数"></a>5.Math的一些函数</h3><p>(1) Math.floor()  //向下取整</p><p>(2) Math.ceil() //向上取整</p><p>(3) Math.round() //四舍五入</p><h3 id="6-字符串的一些操作"><a href="#6-字符串的一些操作" class="headerlink" title="6.字符串的一些操作"></a>6.字符串的一些操作</h3><p>(1) 定义字符串的方法：str = ‘red’ 或 str = new String(‘red’)</p><p>(2) 函数小例子：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'red'</span>;</span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">'RED'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">0</span>)); <span class="comment">//返回str的第一个字符 r</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">0</span>));<span class="comment">//返回str的第一个字符 r</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="number">0</span>]);<span class="comment">//返回str的第一个字符</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">0</span>, <span class="number">2</span>)); <span class="comment">//第一个参数为开始位置，第二个参数为长度 re</span></span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">'yellow'</span>));<span class="comment">//连接字符串 redyellow  str仍然为'red'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase()); <span class="comment">//返回转换为大写的RED str仍然为'red'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase()); <span class="comment">//返回转换为小写   str1仍然为'ERD'</span></span><br></pre></td></tr></table></figure><h3 id="7-转换为布尔类型"><a href="#7-转换为布尔类型" class="headerlink" title="7.转换为布尔类型"></a>7.转换为布尔类型</h3><p>Boolean(变量)：</p><p>(1)变量为0、NaN、undefined、null、’’ 则返回false</p><p>(2)其余为true（空数组返回true）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">7</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">'red'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">''</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="8-声明数组"><a href="#8-声明数组" class="headerlink" title="8.声明数组"></a>8.声明数组</h3><p>(1) var arr = new Array()</p><p>(2)var arr = []</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cwoduyou%5Cblog%5Cimages%5C%E6%95%B0%E7%BB%84.png" alt="数组" title="数组"></p><h3 id="9-构造函数："><a href="#9-构造函数：" class="headerlink" title="9.构造函数："></a>9.构造函数：</h3><p>(1)function 函数名(形参) {} //形参可以没有  ，下同</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;   <span class="comment">//return只返回一个值，且其后面的语句不执行，如果没有return，返回udefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">//不执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">2</span>, <span class="number">4</span>)); <span class="comment">// 返回6</span></span><br></pre></td></tr></table></figure><p>(2)var 函数名 = function(形参) {}</p><p>注意点：实参个数多余形参个数，以形参个数为准，反则，返回NaN （不利用伪数组）</p><p>(3)arguments伪数组:</p><p>arguments对象可以获取传入函数的值，它将这些值保存在一个数组里面，因此可以将arguments看作一个数组使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fn1() &#123;</span><br><span class="line">var num &#x3D; 0;</span><br><span class="line">for (i &#x3D; 0; i &lt; arguments.length; i++) &#123;&#x2F;&#x2F;arguments可以接受多个变量</span><br><span class="line">num +&#x3D; arguments[i];</span><br><span class="line">&#125;</span><br><span class="line">console.log(num);&#x2F;&#x2F;8</span><br><span class="line">&#125;</span><br><span class="line">fn1(1, 2, 5)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://yoursite.com/2020/06/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2020/06/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2020-06-18T23:32:47.000Z</published>
    <updated>2020-07-28T08:16:33.975Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>第一部分：<br>内容</p><hr><p>第二部分：<br>内容</p><hr><p>第三部分：<br>结尾</p><hr><p><a href="http://www.dddd" target="_blank" rel="noopener">www.dddd</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/06/19/hello-world/"/>
    <id>http://yoursite.com/2020/06/19/hello-world/</id>
    <published>2020-06-18T23:26:46.385Z</published>
    <updated>2020-06-18T23:26:46.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
